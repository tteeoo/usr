#!/bin/sh
# TODO: module dependencies
#       module files (to get from home/)

set -e

die() {
	>&2 printf "%s\n" "$*"
	exit 1
}

[ "$EUID" = "0" ] && die "do not run as root"

: "${USR_DIR:=$HOME/src/git/usr}"

mkdir -p "$USR_DIR"/var
mkdir -p "$USR_DIR"/home
mkdir -p "$USR_DIR"/modules

usage() {
	die "usage: usr [-a <module>] | [-r <module>] | [-i <module>] | [-g <module>] | [-u] | [-l[i | r]]"
}

module_add() {
	MOD="$2"
	MOD_FILE="$USR_DIR/modules/$MOD".mod.sh
	MOD_INSTALL="$USR_DIR/var/$MOD".installed

	[ -e "$MOD_INSTALL" ] && die "$MOD is already installed"
	[ -z "$MOD" ] && usage

	# shellcheck source=modules/test.mod.sh
	. "$MOD_FILE"

	"$MOD"_add

	touch "$MOD_INSTALL"
}

module_remove() {
	MOD="$2"
	MOD_FILE="$USR_DIR/modules/$MOD".mod.sh
	MOD_INSTALL="$USR_DIR/var/$MOD".installed

	[ -e "$MOD_INSTALL" ] || die "$MOD is not installed"
	[ -z "$MOD" ] && usage

	# shellcheck source=modules/test.mod.sh
	. "$MOD_FILE"

	"$MOD"_remove

	rm "$MOD_INSTALL"
}

module_info() {
	MOD="$2"
	MOD_FILE="$USR_DIR/modules/$MOD".mod.sh

	[ -z "$MOD" ] && usage

	# shellcheck source=modules/test.mod.sh
	. "$MOD_FILE"

	"$MOD"_info
}

get_module() {
	MOD="$2"
	MOD_FILE="$USR_DIR/modules/$MOD".mod.sh

	[ -z "$MOD" ] && usage

	VALID=""
	while read -r RMOD; do 
		if [ "$MOD" = "$RMOD" ] ; then
			VALID="yes"
		fi
	done <"$USR_DIR"/var/remote.list

	[ "$VALID" = "yes" ] || die "remote does not have $MOD"

	xargs printf "url = %smodules/$MOD.mod.sh" <"$USR_DIR"/var/remote | curl -sLf -o "$USR_DIR/modules/$MOD".mod.sh -K - || die "error getting"
}

list_modules() {
	for MOD in "$USR_DIR"/modules/*; do 
		if [ -f "$MOD" ] ; then
			if [ "${MOD#*.}" = "mod.sh" ] ; then
				NODOT=${MOD%%.*}
				printf "%s\n" "${NODOT##*/}"
			fi
		fi
	done
}

list_installed() {
	for MOD in "$USR_DIR"/var/*; do 
		if [ -f "$MOD" ] ; then
			if [ "${MOD#*.}" = "installed" ] ; then
				NODOT=${MOD%%.*}
				printf "%s\n" "${NODOT##*/}"
			fi
		fi
	done
}

list_remote() {
	while read -r MOD; do 
		printf "%s\n" "$MOD"
	done <"$USR_DIR"/var/remote.list
}

update_remote() {
	xargs printf "url = %smodules/mod.list" <"$USR_DIR"/var/remote | curl -sLf -o "$USR_DIR"/var/remote.list -K - || die "error updating"
}

[ -e "$USR_DIR"/modules/mod.list ] || list_modules > "$USR_DIR"/modules/mod.list
[ -e "$USR_DIR"/var/remote ] || printf "https://raw.githubusercontent.com/tteeoo/usr/main/" > "$USR_DIR"/var/remote

case ${1#-} in
	h) usage ;;
	a) module_add "$@" ;;
	r) module_remove "$@" ;;
	i) module_info "$@" ;;
	g) get_module "$@" ;;
	l) list_modules ;;
	u) update_remote ;;
	li) list_installed ;;
	lr) list_remote ;;
	*) usage ;;
esac

exit 0
