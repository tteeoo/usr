#!/bin/sh
# licensed under the Unlicense
# TODO:
# - create more modules
# - force add/force remove
# - purge from home tree

set -e

die() {
	>&2 printf "%s\n" "$*"
	exit 1
}

[ "$(id -u)" = 0 ] && die "usr: do not run as root"

: "${USR_DIR:=$HOME/src/git/usr}"

# create directories
mkdir -p "$USR_DIR"/var
mkdir -p "$USR_DIR"/home
mkdir -p "$USR_DIR"/modules

usage() {
	die "usage: usr <option [arg]> 

options:
  -s <module>  sync module (equivalent to -g; -p; -a)
  -a <module>  add module
  -r <module>  remove module
  -i <module>  module information
  -g <module>  get module
  -p <module>  prep module
  -u           update remote
  -l           list local modules
  -li          list installed modules
  -lr          list remote modules"
}

module_add() {
	MOD="$2"
	MOD_FILE="$USR_DIR/modules/$MOD".mod.sh
	MOD_INSTALL="$USR_DIR/var/$MOD".installed

	[ -e "$MOD_INSTALL" ] && die "usr: $MOD is already installed"
	[ -z "$MOD" ] && usage

	# shellcheck source=modules/test.mod.sh
	. "$MOD_FILE"

	printf "usr: adding %s\n" "$MOD"
	"$MOD"_add

	touch "$MOD_INSTALL"
}

module_remove() {
	MOD="$2"
	MOD_FILE="$USR_DIR/modules/$MOD".mod.sh
	MOD_INSTALL="$USR_DIR/var/$MOD".installed

	[ -e "$MOD_INSTALL" ] || die "usr: $MOD is not installed"
	[ -z "$MOD" ] && usage

	# shellcheck source=modules/test.mod.sh
	. "$MOD_FILE"

	printf "usr: removing %s\n" "$MOD"
	"$MOD"_remove

	rm "$MOD_INSTALL"
}

module_info() {
	MOD="$2"
	MOD_FILE="$USR_DIR/modules/$MOD".mod.sh

	[ -z "$MOD" ] && usage

	# shellcheck source=modules/test.mod.sh
	. "$MOD_FILE"

	printf "usr: %s:\n" "$MOD"
	"$MOD"_info
}

get_module() {
	MOD="$2"
	MOD_FILE="$USR_DIR/modules/$MOD".mod.sh

	[ -z "$MOD" ] && usage

	VALID=""
	while read -r RMOD ; do 
		if [ "$MOD" = "$RMOD" ] ; then
			VALID="yes"
		fi
	done <"$USR_DIR"/var/remote.list

	[ "$VALID" = "yes" ] || die "usr: remote does not have $MOD"

	URL=$(cat "$USR_DIR"/var/remote)
	URL="$URL"modules/"$MOD".mod.sh
	printf "usr: getting %s\n" "$URL"
	printf "url = %s" "$URL" | curl -sLf -o "$USR_DIR/modules/$MOD".mod.sh -K - || die "usr: error getting"
}

prep_module() {
	MOD="$2"
	MOD_FILE="$USR_DIR/modules/$MOD".mod.sh

	[ -z "$MOD" ] && usage

	# shellcheck source=modules/test.mod.sh
	. "$MOD_FILE"

	for DIR in $("$MOD"_dirs) ; do
		if ! [ -d "$USR_DIR/home/$DIR" ] ; then
			printf "usr: mkdir %s/home/%s\n" "$USR_DIR" "$DIR"
			mkdir -p "$USR_DIR/home/$DIR"
		fi
	done

	BASE_URL=$(cat "$USR_DIR"/var/remote)
	for FILE in $("$MOD"_files) ; do
		if ! [ -f "$USR_DIR/home/$FILE" ] ; then
			URL="$BASE_URL"home/"$FILE"
			printf "usr: getting %s\n" "$URL"
			printf "url = %s" "$URL" | curl -sLf -o "$USR_DIR/home/$FILE" -K - || die "usr: error getting $USR_DIR/home/$FILE" &
		fi
	done
}

list_modules() {
	for MOD in "$USR_DIR"/modules/* ; do 
		if [ -f "$MOD" ] ; then
			if [ "${MOD#*.}" = "mod.sh" ] ; then
				NODOT=${MOD%%.*}
				printf "%s\n" "${NODOT##*/}"
			fi
		fi
	done
}

list_installed() {
	for MOD in "$USR_DIR"/var/* ; do 
		if [ -f "$MOD" ] ; then
			if [ "${MOD#*.}" = "installed" ] ; then
				NODOT=${MOD%%.*}
				printf "%s\n" "${NODOT##*/}"
			fi
		fi
	done
}

list_remote() {
	while read -r MOD ; do 
		printf "%s\n" "$MOD"
	done <"$USR_DIR"/var/remote.list
}

update_remote() {
	list_modules > "$USR_DIR"/modules/mod.list
	URL=$(cat "$USR_DIR"/var/remote)
	URL="$URL"modules/mod.list
	printf "usr: getting %s\n" "$URL"
	printf "url = %s" "$URL" | curl -sLf -o "$USR_DIR"/var/remote.list -K - || die "usr: error updating"
}

# create module list if it does not exist
[ -e "$USR_DIR"/modules/mod.list ] || list_modules > "$USR_DIR"/modules/mod.list

# create remote URL file if it does not exist
[ -e "$USR_DIR"/var/remote ] || printf "https://raw.githubusercontent.com/tteeoo/usr/main/" > "$USR_DIR"/var/remote

case ${1#-} in
	s) get_module "$@" && prep_module "$@" && module_add "$@" ;;
	a) module_add "$@" ;;
	r) module_remove "$@" ;;
	i) module_info "$@" ;;
	g) get_module "$@" ;;
	p) prep_module "$@" ;;
	l) list_modules ;;
	u) update_remote ;;
	li) list_installed ;;
	lr) list_remote ;;
	*) usage ;;
esac

exit 0
